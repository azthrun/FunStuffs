# The model has already been created by the framework, and extends Rhom::RhomObject
# You can add more methods here
class Miner
  include Rhom::PropertyBag

  set :partition, :user

  class << self
    
    def storeMinerStatus(data)
      Miner.delete_all
      db = ::Rho::RHO.get_src_db("Miner")
      db.start_transaction
      begin
        data.keys.each do |workerId|
          worker = data[workerId]
          Miner.create({
            "object" => workerId,
            "condition" => worker["condition"],
            "osVersion" => worker["version"],
            "driver" => worker["driver"],
            "miner" => worker["miner"],
            "numOfGPU" => worker["gpus"],
            "minerInstance" => worker["miner_instance"],
            "minerHashes" => worker["miner_hashes"],
            "bioses" => worker["bioses"],
            "gpusInfo" => worker["meinfo"],
            "gpusRam" => worker["vramsize"],
            "osDriver" => worker["drive_name"],
            "motherboard" => worker["mobo"],
            "biosVersion" => worker["biosversion"],
            "chipLAN" => worker["lan_chip"],
            "rigRam" => worker["ram"],
            "flags" => worker["flags"],
            "rackLoc" => worker["rack_loc"],
            "rigIpAddress" => worker["ip"],
            "serverTime" => worker["server_time"].to_i,
            "rigUpTime" => worker["uptime"],
            "minerUpTime" => worker["miner_secs"].to_i,
            "rx" => worker["rx_kbps"],
            "tx" => worker["tx_kbps"],
            "sysLoadAvg" => worker["load"],
            "cpuTemp" => worker["cpu_temp"],
            "freeRam" => worker["freespace"],
            "totalHash" => worker["hash"],
            "minePool" => worker["pool"],
            "gpuTemp" => worker["temp"],
            "gpuPTune" => worker["powertune"],
            "gpuVoltage" => worker["voltage"],
            "gpuWatt" => worker["watts"],
            "gpuFanRPM" => worker["fanrpm"],
            "gpuCore" => worker["core"],
            "gpuMem" => worker["mem"]
          })
        end
        db.commit
      rescue Rho::RhoError => e        
        db.rollback
      end
    end
    
  end
end
